Q16. Implement C++ program for expression conversion as infix to postfix and its
evaluation using stack based on given conditions
i. Operands and operators, both must be single characters.
ii. Only '+', '-', '*' and '/ ' operators are expected

#include <iostream>
#include <stack>
#include <cctype> // For isdigit() function

// Function to check if a character is an operator
bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

// Function to get the precedence of an operator
int getPrecedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    if (op == '*' || op == '/')
        return 2;
    return 0;
}

// Function to convert infix expression to postfix
std::string infixToPostfix(const std::string& infix) {
    std::stack<char> stack;
    std::string postfix;

    for (char ch : infix) {
        if (std::isalnum(ch)) {
            postfix += ch; // Operand, append to the postfix expression
        } else if (isOperator(ch)) {
            // Operator, pop operators from the stack with higher or equal precedence
            while (!stack.empty() && getPrecedence(stack.top()) >= getPrecedence(ch)) {
                postfix += stack.top();
                stack.pop();
            }
            stack.push(ch);
        } else if (ch == '(') {
            stack.push(ch);
        } else if (ch == ')') {
            // Pop operators from the stack until '(' is encountered
            while (!stack.empty() && stack.top() != '(') {
                postfix += stack.top();
                stack.pop();
            }
            stack.pop(); // Pop '('
        }
    }

    // Pop remaining operators from the stack
    while (!stack.empty()) {
        postfix += stack.top();
        stack.pop();
    }

    return postfix;
}

// Function to evaluate a postfix expression
int evaluatePostfix(const std::string& postfix) {
    std::stack<int> stack;

    for (char ch : postfix) {
        if (std::isdigit(ch)) {
            stack.push(ch - '0'); // Convert character to integer and push to the stack
        } else if (isOperator(ch)) {
            // Pop two operands from the stack, perform operation, and push result back
            int operand2 = stack.top();
            stack.pop();
            int operand1 = stack.top();
            stack.pop();

            switch (ch) {
                case '+':
                    stack.push(operand1 + operand2);
                    break;
                case '-':
                    stack.push(operand1 - operand2);
                    break;
                case '*':
                    stack.push(operand1 * operand2);
                    break;
                case '/':
                    stack.push(operand1 / operand2);
                    break;
            }
        }
    }

    // The final result will be on the top of the stack
    return stack.top();
}

int main() {
    std::string infixExpression;

    // Get the infix expression from the user
    std::cout << "Enter an infix expression: ";
    std::cin >> infixExpression;

    // Convert infix to postfix
    std::string postfixExpression = infixToPostfix(infixExpression);

    // Display the postfix expression
    std::cout << "Postfix expression: " << postfixExpression << std::endl;

    // Evaluate the postfix expression
    int result = evaluatePostfix(postfixExpression);

    // Display the result
    std::cout << "Result: " << result << std::endl;

    return 0;
}
