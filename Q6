#include <iostream>
#include <vector>

// Function to add two matrices
std::vector<std::vector<int>> add_matrix(const std::vector<std::vector<int>>& matrix1, const std::vector<std::vector<int>>& matrix2) {
    int rows = matrix1.size();
    int cols = matrix1[0].size();
    
    std::vector<std::vector<int>> result(rows, std::vector<int>(cols, 0));

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            result[i][j] = matrix1[i][j] + matrix2[i][j];
        }
    }

    return result;
}

// Function to multiply two matrices
std::vector<std::vector<int>> multi_matrix(const std::vector<std::vector<int>>& matrix1, const std::vector<std::vector<int>>& matrix2) {
    int rows1 = matrix1.size();
    int cols1 = matrix1[0].size();
    int cols2 = matrix2[0].size();
    
    std::vector<std::vector<int>> result(rows1, std::vector<int>(cols2, 0));

    for (int i = 0; i < rows1; ++i) {
        for (int j = 0; j < cols2; ++j) {
            for (int k = 0; k < cols1; ++k) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }

    return result;
}

int main() {
    // Example matrices
    std::vector<std::vector<int>> matrix1 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    std::vector<std::vector<int>> matrix2 = {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}};

    // Perform matrix addition
    std::vector<std::vector<int>> sum_result = add_matrix(matrix1, matrix2);

    // Perform matrix multiplication
    std::vector<std::vector<int>> product_result = multi_matrix(matrix1, matrix2);

    // Display results
    std::cout << "Matrix Addition Result:\n";
    for (const auto& row : sum_result) {
        for (int element : row) {
            std::cout << element << " ";
        }
        std::cout << "\n";
    }

    std::cout << "\nMatrix Multiplication Result:\n";
    for (const auto& row : product_result) {
        for (int element : row) {
            std::cout << element << " ";
        }
        std::cout << "\n";
    }

    return 0;
}
