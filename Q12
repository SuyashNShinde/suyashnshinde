Q12. Write a C++ Program to create and display a Singly linked list. A l s o write a
function to delete a node at the end of the linked list 

#include <iostream>

// Definition of a Node in the linked list
struct Node {
    int data;      // Data of the node
    Node* next;    // Pointer to the next node in the list
};

// Function to insert a node at the end of the linked list
void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node(); // Create a new node
    newNode->data = value;      // Set its data
    newNode->next = nullptr;    // It will be the last node, so set next to nullptr

    if (head == nullptr) {
        // If the list is empty, make the new node the head
        head = newNode;
    } else {
        // Traverse to the end of the list and append the new node
        Node* current = head;
        while (current->next != nullptr) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to delete a node at the end of the linked list
void deleteAtEnd(Node*& head) {
    if (head == nullptr) {
        // If the list is empty, nothing to delete
        return;
    }

    if (head->next == nullptr) {
        // If there is only one node, delete it and set head to nullptr
        delete head;
        head = nullptr;
    } else {
        // Traverse to the second-to-last node
        Node* current = head;
        while (current->next->next != nullptr) {
            current = current->next;
        }

        // Delete the last node and set next of second-to-last node to nullptr
        delete current->next;
        current->next = nullptr;
    }
}

// Function to display the linked list
void displayList(const Node* head) {
    const Node* current = head;
    while (current != nullptr) {
        std::cout << current->data << " ";
        current = current->next;
    }
    std::cout << std::endl;
}

// Function to delete all nodes in the linked list
void deleteList(Node*& head) {
    while (head != nullptr) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }
}

int main() {
    // Creating a linked list
    Node* head = nullptr; // Initializing an empty list

    // Inserting nodes at the end
    insertAtEnd(head, 3);
    insertAtEnd(head, 7);
    insertAtEnd(head, 10);

    // Displaying the linked list before deletion
    std::cout << "Linked List (Before Deletion): ";
    displayList(head);

    // Deleting a node at the end
    deleteAtEnd(head);

    // Displaying the linked list after deletion
    std::cout << "Linked List (After Deletion): ";
    displayList(head);

    // Delete all nodes in the linked list
    deleteList(head);

    return 0;
}
